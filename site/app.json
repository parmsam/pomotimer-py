[{"name": "app.py", "content": "from shiny import *\nimport time\nimport sys\nfrom pathlib import Path\nfrom typing import List\nfrom shiny.types import NavSetArg\n# import htmltools\n\n# Helper functions\ndef min_to_sec(minutes):\n    return minutes * 60\n\ndef get_current_date():\n    curr_date = time.strftime(\"%a - %b %d, %Y\", time.localtime())\n    return curr_date\n\ndef fmt_seconds(time_in_seconds):\n    return time.strftime(\"%H:%M:%S\", time.gmtime(time_in_seconds))\n\n\n# Declare paths to static assets\ncss_file = Path(__file__).parent / \"www\" / \"styles.css\"\njs_file = Path(__file__).parent / \"www\" / \"script.js\"\n\nlong_break_image = \"https://thumbs.gfycat.com/BriskLankyCopperhead-size_restricted.gif\"\npomo_image = \"https://cdn.dribbble.com/users/1341046/screenshots/3993533/media/d5d7198e3cd99068106a19679b4d7ee5.gif\"\nshort_break_image = \"https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExemt1NmJnZGRsNGRvYmY5NThld2N1dzJpYWdudGQwazFzN2UxdTR6NiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/MfeD9WGuYxVUk/giphy.gif\"\n\napp_link = \"https://github.com/parmsam/pomotimer-py\"\n\n# Declare navbar for app\ndef nav_controls(prefix: str) -> List[NavSetArg]:\n    return [\n        ui.nav(\"timer\",\n               ui.div(\n                   ui.input_action_button(\"pomo\", \"pomo\", class_=\"btn-red\"),\n                   ui.input_action_button(\n                       \"short_break\", \"short break\", class_=\"btn-purple\"),\n                   ui.input_action_button(\n                       \"long_break\", \"long break\", class_=\"btn-blue\"),\n                   class_=\"time-btns\",\n               ),\n               ui.h6(ui.output_text(\"current_date\")),\n               ui.h2(ui.output_text(\"time_left\")),\n               ui.br(),\n               ui.div(\n                   ui.input_action_button(\n                       \"start\", \"start/stop\", class_=\"btn-primary\"),\n                   ui.input_action_button(\n                       \"reset\", \"reset\", class_=\"btn-warning\"),\n                   class_=\"main-btns\",\n               ),\n               ui.br(),\n        ),\n        ui.nav(\"settings\",\n               ui.div(\n                   ui.input_checkbox(\"include_images\", \"include gifs\", \n                                     value=False),\n                   ui.input_numeric(\n                        \"pomo_length\", \"pomo (min)\", \n                        value=25,\n                        width='45%'),\n                   ui.input_numeric(\n                        \"short_break_length\",\n                        \"short break (min)\", \n                        value=5,\n                        width='45%'),\n                   ui.input_numeric(\n                       \"long_break_length\", \n                       \"long break (min)\", \n                       value=10,\n                       width='45%'),\n                   class_=\"settings\",\n               ),\n        ),\n        ui.nav_control(\n            ui.a(\n                \"github\",\n                href= app_link,\n                target=\"_blank\",\n            ),\n        ),\n    ]\n\n# Define the app \napp_ui = ui.page_fluid(\n    ui.include_js(str(js_file), method = \"link_files\"),\n    ui.include_css(str(css_file), method = \"link_files\"),\n    ui.h1(\"pomotimer-py \ud83c\udf45\", class_ = \"main_title\"),\n    ui.navset_pill_card(*nav_controls(\"_\")),\n)\n\ndef server(input, output, session):\n    # Update the current time every second\n    curr_time = reactive.Value(time.time())\n    timer_active = reactive.Value(False)\n    remaining_time = reactive.Value(-1)\n\n    # Track the remaining pomo minutes \n    @reactive.Effect\n    def _():\n        reactive.invalidate_later(1)\n        if (timer_active.get() == True):\n            curr_time.set(time.time())\n            with reactive.isolate():\n                remaining_time.set(remaining_time.get() - 1)\n                if(remaining_time.get() == 0):\n                    timer_active.set(False)\n                    m = ui.modal(\n                        \"Time is up.\",\n                        title=\"Nicely done!\",\n                        easy_close=True,\n                        footer=\"Pomotimer-py\",\n                    )\n                    ui.modal_show(m)  \n\n    @reactive.Effect\n    @reactive.event(input.pomo)\n    def set_pomo_reg():\n        remaining_time.set(input.pomo_length()*60)\n        if(input.include_images()):\n            ui.remove_ui(selector=\"div.running_img\")\n            ui.insert_ui(\n                ui.div(\n                    ui.br(),\n                    ui.img(src = pomo_image),\n                    class_=\"running_img\",\n                ),\n                selector=\"#reset\",\n                where=\"afterEnd\",\n            )\n\n    @reactive.Effect\n    @reactive.event(input.short_break)\n    def set_pomo_short():\n        remaining_time.set(int(input.short_break_length()*60))\n        if(input.include_images()):\n            ui.remove_ui(selector=\"div.running_img\")\n            ui.insert_ui(\n                ui.div(\n                    ui.br(),\n                    ui.img(src=short_break_image),\n                    class_=\"running_img\",\n                ),\n                selector=\"#reset\",\n                where=\"afterEnd\",\n            )\n\n    @reactive.Effect\n    @reactive.event(input.long_break)\n    def set_pomo_long():\n        remaining_time.set(input.long_break_length()*60)\n        if(input.include_images()):\n            ui.remove_ui(selector=\"div.running_img\")\n            ui.insert_ui(\n                ui.div(\n                    ui.br(),\n                    ui.img(src=long_break_image),\n                    class_=\"running_img\",\n                ),\n                selector=\"#reset\",\n                where=\"afterEnd\",\n            )\n\n    # Reset the timer\n    @reactive.Effect\n    @reactive.event(input.reset)\n    def reset_stop_time():\n        remaining_time.set(0)\n        ui.remove_ui(selector=\"div.running_img\")\n\n    # Start/stop the timer\n    @reactive.Effect\n    @reactive.event(input.start)\n    def stop_timer():\n        timer_active.set(\n            not (timer_active.get())\n        )\n\n    # Update the time left\n    @output\n    @render.text\n    def time_left():\n        if (remaining_time.get() == 0):\n            remaining_time.set(0)\n            return \"Select a timer\"\n        print(remaining_time.get())\n        if (remaining_time.get()) > 0:\n            return fmt_seconds(remaining_time.get())\n        remaining_time.set(0)\n\n        return \"Time's up!\"\n    \n    # Update the current date\n    @output\n    @render.text\n    def current_date():\n        return get_current_date()\n\n\napp = App(app_ui, server, debug=False)\n", "type": "text"}, {"name": "README.md", "content": "\n# pomotimer-py\n\nA simple pomodoro timer written in Shiny for Python.\n\n# app link\n\n- [Github pages](https://parmsam.github.io/pomotimer-py/site/)\n\n- [Shinylive.io](https://shinylive.io/py/app/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbJjmVYnTJMAVAB0IfAUKZk+cCVMHCW2FhPqMmqKGTYAbDgCNe-ZUwAKuthobMy2VFwDmp6cIAyHFmVtb2XNgYDqhwLG7mAHJQAG4AynBkAIJ0zhIAxBEybGQw+mTExPrqEBlMABJw+qF0TDQArhCEcqQlACZwNEwwXAD6Bb0scIQAFD0Q9RQsAJSIEkwLTHSJ9XQQ3VyTYaJMAGwADBISHV3Oib2Eq8vkvW26cCOz84uXdHS390wAvLLyGD50GhyeAjMRgACkUCYAFomOCTOC2ng4QBNMHI4FwDD6YiEKD5eSPabPBbLMirdavd53ChHCAnOowMiDYakNosEaY3p9IYkekzObrRZkim-eD-MiAzGgiHlRDggCy8ri6LFWOcTMJXJ5rP502JpUNmQAIsN9FBltprOECqwyLoOIQmFAWEMyCVCK7ejQOPo4N9LNYRr1vb64CHplgLZRhAB6JhggDuybBTHjYJ82D9LAwnvUYAkACsWKG-QGrHpg6Xw71IzprnGE2Bk4nU+mwCxCHQOKgyBhi2C6TiIM5ekZllAANbcmBQM4BsE5MioFiIWOxvT1GBGHPOGjYPF9kgwWMAIW7LEnHigEEn2AAwsR0HA6Gw4FA2tCWBwAF7h5YAo6FBtBgzgcDQg4QAIMDEDOc7+j8i5kMuq7roQbQQBgbTdkYuF+rmjCxvUQx0CwsYAIwAMwACzkfs1G7LGnbLJQ7DEO6saUQAnFxlEAKyUZRsbwG0HBQLGbR8W0ADs5FcQAHHAlHoTx+y7PJdG7FAcm7NJXFGNRMlwHAfGgeBkFsUIY4TtOfDwQuYBLiua7CXAolQPsZmoGwQTHq57mxjE5EYCiABM+iThYAAqhB8QqADiACSlGRIWACiAAecBMuRkQwAAUhAABa8UAEosJEZUxCiMAonxkRRQYbShZE5FtD++WoCiADqbT1G08UAIqJlAP4AGI-pEoUAKoZW0UWlbskQcEV+iEMa5GhQqABqXGoEYEClWtMB8WwRhjVx0DdUVNAohA+g0FA3WDbVlGDVxRWJrGCo0HAxpcd18X1CiGXbdNk6xmB3lBGBEEFoaaCoL0hi3g5TmoZDHCbkYBEnvWMAsLAsbQex8h0NCODonSJpmtGTDQDERgWnUgjOugxydPTsQXKQkpFByqDLD6GWIHadDTDCAB8TBeD4wDRPEiQpM4AC6gqLEsKxrEwwAkhrTD1BwGAMzKmJ0FTQr61bCyG1hHAxKClvW87BtG1wqCTL0UDNBwpBjpMBQQDKJOqmCIf4EwhDml6XxgkYZAQNCyxtGC0x4HrLtW7b7ue97LQQP7yGkI7melwsGZsMo1nvpOocdpXMjjjXqpRy6Jax2A8eJx7dCoH6qfp07ZeLNnUG5z7ftGAHxcZ8P+tgsOo5N1OdeL0wy+1xHrcx3HCfQkY+j1AoYBp7Pw-b+3YKYvvCf5oPc9MKfQ+Z7bbC7CMtvEJMHvMhQGVkDKKkMYPi0hPk-B+r9QofyNl-Zcns-4AKvvIZGnRfBgPvnPW245HgYOHrbUSDsz5l1Hj-L2E8C5TyLkHIhD8Mz2iEHXHwFoyBMQKKgFu0dL6dz3oLOydBsADxoS-N2Y9mR519hQ6e1Dn4P3LmAACiQ64KLQciC+vQO5d2hCNNYLhBEyLLmojus4uA3wgHfIR+twGYKNtgqxVs7H61tibDMiQ5AjnMfo62+D7Yl1kTbERpDCBvkIJOIwxAMoyi4FHfq4Y7JnDvk2KJh8OhMFhgkixfiXYxHxEfL4Y18RDAcRAgJnsJjwG7KMDJZcw6MFgn6Eceg64kyYGMLgxII5VNLtkw+cAvihT4rgzJixEwcDaHoL4AByaifFwQTKKdYjAOdmRlJfI6XxQzFgVyrhvFBDSbD4E6ZnLZjcbItPGO05Ehysk5N6QMq5zsRljLYJM6Zsz5l4JKcsrcqzKmeLngvUgS8bK7OcI0jpfzh4ApHOvU5rSIAXITBCsu3Tcl0UGUMx54ypkzLmeiuehiXHIRcB4h+7zH54v8cbbmfI+b6HWS7W2UB6XVLAGBbGFtZFsCFj8AEIxEbIy4JOMlzt6FnDIB3Mc5pbwctLmShxKtqZMFND6CA-o9D+kRoi-lhsAy2x0Gcb0h9Rn0tHtEjovRiwjF5cWasaduiJErm0ByKNpw+mzHojWprknhjzFayUIw8y2uRPAPQxAnWITAC66s+YHGv3IsHWpZsKY8EADwbgBRfY4W3XoDljEFzkGQfuJ9BlONiG6XoTh9D6AuBaNoIwRAMx5uQBgxQZS9FTk-A0HMugkRiC+EYSzkSwJ-siIYroJFPCdpkaaqAaRqrfJHK4MY1RMDgL2-hrBdQpydlSfo8gAwTh9r2jA20bmcj+NKfUeszZkLkL2-d75D1YhPT0kY+TihwANBrZYuaXC7vgPe8RR7n1HxGNCcinbJ1MCinQb2k5ZDzu-VALgLhtC1I2BMKYiKNYAAED23qxGlGgv1mh6wZL0R46trZ4ftliLg3TRn3GRvcOgIxwNEPAi069gH1SJEeN8H40Gj4ToMVcP9WI3RnvFBez9pcRl6E1txxZLAij3Ao1cxDyGRxif+LxjTkgtOYlArxiWsI2NIo1uBEYenf2GbFXxr4Px9jCaGVxx9OmAFvsKfcxYzAfi2xgncOl3mrZgiinu7wBtMAyo2QsfNfoO7LUIFUHgbRSBwAAITRZi++VQFwcRDC+IJuAFK-E0EKBQOgHcLCJrJsmrLsiZOZP82G-EgxK6JjGBLRFetcMPvwxgQjxHfBO164p1dMZ+2iKwLUxrTAGRlpJr0ZYzg1P6OswZv4EmlnTZgiCys0wRAHFmxZmgk2f6LKaN6uC8SiSUeERgb9xBe29ENlaqowwCiVbBAQh7jR9Ojj4GkE+GTR4kWZK9q53jCHma8TYljwrS7ZxgCtlgdAnQ-EW3Ej9JWDGcPUWCOgf3f2A-q7KnH1shh+maIIDu6RlGk8zomN8ywO5QCBC+NK9IGeWLpDh6jR7BsfZ6-zrE43yBncmP8BuzIN6zfm+cRblkAHOatut0chmtvi+20r6uU49tsEeIdpzx3FiWe20kmJ12wi3ZB0bR7z3XuU4+zT779tfsQH+zOIHJus4iLBy9jgzLEdGwIUHhZtjyf3cB1atHXwdc7KxwjzOBL5FE60yTg5MOFhJ-1k76nX2wB07CIozPsimcvl6WCNnFXOcp1L7K3nixRtucFyRkbIuMBi4AdtxeuuhWkc5gt2pyNAWredmr7Tmvzu952fU0FBuDtHfY6d83l3LdY45PqO7DK7fZSe+GR37388dx+4Tj3xPkep1txd-3EOs+uzttDjZWD4eR534s5HMfCBfBn8CxPb-nYU8z9PcM8ADFgc8NY89Ptad6d6855y8Wcq92c6Ba9ucNYIMNZMhSpi9hB1U1RzZ28+saMBsiMhdCCxte0tcptlE5dOZlFBg2ExMx8qNsokNPcNdeMnMiFbZ7cD9A8oCXcwBT808AdL9gdDRMCmA4h6EWEfAnx4M1UyZhciCBdSC28+cVDRdKDu8psmEhBaDu1GCzZmCrZXN+sJMMkIB2JOMyYb1iC7NL19EMDFgp0Z1Pg8DMQmA-QgQesh1JhlD6QXxgg4B-4B8uguRvDldt8TsWkJ9bNjN+MmAnNoiWCf0NtxQJMuCkURRtYwQEgqdhAoQzZIJnZeFxc4i-gHCfdeAugrNWDNN1dKjjMJZpZ9gUjVctZ1gaAmQWQ+R2Q6i0jGjxQqiiEKiMjODnCOjyRciwAwt4AJlwh6hUBMt4YNY9ZXDZ0FCF03gl1Z1fDv5-DCDAi6BgjQinYGQgEbhZ0TD9Ycj1gxULhF0rjVMIMJBNUfgkh0A+V0AA8R0Xw11kQOgp5nA8kCkP0JAwAABfPAcAaAeAagZYAAR0Nm-RjBzDIH-nwCIF5hjGoACG4AkHxKzBowkB0D0EMCMChJhMgFgAQGQBbCYi7B7D7GLCxJpVxOQHXAqCqBqDqEaHIRKD9GED7igGwDiC-npADA-joH0Ali+GlhAD1iFOdADFVUTCYCSH6l9mlNlIAG49YoAsBzRsBHh9SIBIShxEgmA2ACYopiAEg+jwgfg-VxZvgFSlSrTUAAwAR-g+4sYRgJlEBcUiEnSkjg0AxyIzSNYmcwwWlMA595NWiJZFT9FwgABqH4ZgEQK0UiOARKcXTAAQVAHBJgOiaYKM62LMn4A4CshYC0p2O41gM0+siQLkgAeSMELA+xtGIHXn9GIjcgkGVJCNgD7jgHFMaHDSbHRhcjZTYHqBxj8nyhvA8GIDgCMCqG+gVAVGhDtPqCCSSHNDoBPAPmICMGEhdAqyYglPZFjHxAtBgAwH4EogAH4YNEwvhJQj5IJlTMQPBUEhyrTeR-yfDDQuS0ptCvDvAKBVVSIJAAASEYVLS4eAcgSMCcNoE0hoJofOR4FMjWRCsEdIPQtBSMKOR0ScEYbC8hPCohPkZTfCHEFbPImQ1heQruJgEacIcikJNyDAK-J2SE8svWQiwvWAsiwwEJKi-k3C6YfC62eiooLEJimUbAt0deBOTil0SOSSycPigSjWIS2spgRC5C75NCjAYuBYzgbgRAZYPENaeoc0YCCZZEai3CrvZMohP81BAMMy1CvsZEl8MUo-T7GUdICIgCk+U4sgR8cgGMYyyA4YEC4QH4G0lgO0h0tkDkHyoEaoyzYC3ygAHlLIwD4jkoyUUsYuIGYrAAsGNNYBvJQ3vOPIMtLhFLFJvJGBHP4D9AnPpGqPrMMuEvNPLKpNhNpOoAZMzGzFzFdDZJxKoGQCfLYN3QLX9HkoWDK3IC-F-DgFFn6VQAymMu2rIC0TgA4GcByFFjCX0DaGMpIBxDoFFjuDoEnGTmbOpkuOZE2M2pZh2u-D-AOv2COpOt5nOsuuuvXiKHur1kesEBuvNBCU+qNEiqBCYD+tOt2qBqYD4hBuOr1ixsTAuqurIBuphoeqKARvXiRsnBRokAwA4r+rCToA6HJhg1EmIlFjxtBr1hZrZtFnIiOsasMCdXSEIAluMp0DaFEhHEFvxqYFCnxrBoBr2sFt2F5u3VWGU2etQy4Aq2MtnFSC4Hls1pbMwmAIv1cEBwxr1lnAyi0VGT0GBuVrtqgAdrfEhrJsVv2FdvNKhJViAA)\n\n# Installation\n\nTo generate the project using Shinylive, I ran the following command within the project directory:\n- `shinylive export . site --full-shinylive`\n\n", "type": "text"}, {"name": "requirements.txt", "content": "shiny\nshinylive\npathlib", "type": "text"}, {"name": "www/script.js", "content": "// Helper functions\nlet playSound = (url) => {\n    let a = new Audio(url);\n    a.play();\n}\n\nlet hmsToSeconds = (str) => {\n    let p = str.split(':'),\n        s = 0, m = 1;\n    while (p.length > 0) {\n        s += m * parseInt(p.pop(), 10);\n        m *= 60;\n    }\n    return s;\n}\n\n// Objects to be used\nlet exampleSound = \"https://github.com/JanLoebel/MMM-TouchAlarm/blob/master/sounds/alarm.mp3?raw=true\"\nlet timeLeft\nlet secLeft\n\n// Event listeners\n$(document).ready(function(){\n    $(\"#start\").click(function(){\n        console.log(\"Start/stop btn was clicked.\")\n    });\n    $(\"#reset\").click(function(){\n        console.log(\"Reset btn was clicked.\")\n    });\n    $(document).on('shiny:recalculated', function(event) {\n        timeLeft = document.querySelector(\"#time_left\").textContent;\n        secLeft = hmsToSeconds(timeLeft)\n        if(secLeft < 1.5){\n            console.log(\"Play sounding alarm\")\n            playSound(exampleSound)\n        }\n    });\n});", "type": "text"}, {"name": "www/styles.css", "content": ".main_title {\n    font-size: 25px;\n    font-weight: bold;\n    color: darkred;\n}\n\n#current_date {\n    font-size: 20px;\n    font-weight: bold;\n    color: black;\n}\n\n#time_left {\n    font-size: 50px;\n    font-weight: bold;\n    color: black;\n}\n\n.btn {\n    border-radius: 50px;\n    border: 1px solid #ccc;\n    padding: 10px 20px;\n    font-size: 16px;\n    cursor: pointer;\n    margin: 10px;\n}\n\n.running_img img {\n    max-width: 200px;\n    max-height: 200px;\n}", "type": "text"}]